# include <stdio.h>
# include <stdlib.h>
# include <jni.h>

//jstring
//Java_com_example_hellojni_HelloJni_stringFromJNI( JNIEnv* env,
//                                                  jobject thiz )

//JNIEnv* env 是结构体JNINativeInterface的二级指针
//JNIEnv 是结构体JNINativeInterface的一级指针
//JNINativeInterface结构体中定义了大量的函数指针,这些函数指针在jni开发中很常用
//(*env)->
//jobject 调用本地函数的java对象   在这个例子中就是MainActivity的实例
//C本地函数命名规则 Java_包名_类名_本地方法名
//jstring (*NewStringUTF)(JNIEnv*,const char*);
jstring Java_com_xfhy_jnihelloworld_MainActivity_helloFromC(JNIEnv* env,jobject thiz,jstring test){
	char* str = "  hello from c!";
	char * revert = Jstring2CStr(env,test);
	//到jni.h中找到如下方法   jstring     (*NewStringUTF)(JNIEnv*, const char*);
	return (*env)->NewStringUTF(env,str);
}

//将java传递过来的字符串转化成c的char类型的数组
char*   Jstring2CStr(JNIEnv*   env,   jstring   jstr)
{
    char*   rtn   =   NULL;
    jclass   clsstring   =   (*env)->FindClass(env,"java/lang/String");
    jstring   strencode   =   (*env)->NewStringUTF(env,"UTF-8");
    jmethodID   mid   =   (*env)->GetMethodID(env,clsstring,   "getBytes",   "(Ljava/lang/String;)[B");
    jbyteArray   barr=   (jbyteArray)(*env)->CallObjectMethod(env,jstr,mid,strencode); // String .getByte("UTF-8");
    jsize   alen   =   (*env)->GetArrayLength(env,barr);
    jbyte*   ba   =   (*env)->GetByteArrayElements(env,barr,JNI_FALSE);
    if(alen   >   0)
    {
        rtn   =   (char*)malloc(alen+1);         //"\0"
        memcpy(rtn,ba,alen);
        rtn[alen]=0;
    }
    (*env)->ReleaseByteArrayElements(env,barr,ba,0);  //
    return rtn;
}
