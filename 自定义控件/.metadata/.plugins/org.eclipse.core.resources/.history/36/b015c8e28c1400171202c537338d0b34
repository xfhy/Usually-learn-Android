package com.xfhy.viewpager;

import java.util.ArrayList;
import java.util.List;

import android.R.integer;
import android.app.Activity;
import android.app.ActionBar;
import android.app.Fragment;
import android.os.Bundle;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.os.Build;

public class MainActivity extends Activity {

	private ViewPager viewPager;
	private List<ImageView> imageViewList;
	private LinearLayout ll_point;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		initViews();   //初始化适配器
		
		initData();    //初始化数据
		
		initAdapter();  //初始化视图
		
	}

	/**
	 * 初始化适配器
	 */
	private void initAdapter() {
		
		
		viewPager.setAdapter(new MyAdapter());
	}

	/**
	 * 初始化数据
	 */
	private void initData() {
		imageViewList = new ArrayList<>();
		
		int imageResIds[] = {R.drawable.a,R.drawable.b,R.drawable.c,R.drawable.d,R.drawable.e};  //资源数组
		ImageView imageView ;
		int length = imageResIds.length;
		View pointView;
		LayoutParams layoutParams;
		for (int i = 0; i < length; i++) {
			imageView = new ImageView(this);   
			imageView.setBackgroundResource(imageResIds[i]);  
			imageViewList.add(imageView);  //添加到列表中
			
			//小白点
			pointView = new View(this);
			pointView.setBackgroundResource(R.drawable.selector_bg_point);  //设置背景
			layoutParams = new LinearLayout.LayoutParams(10, 10);  //设置长宽为10dp
			
			//如果不是第一个,则增加间距
			if(i != 0) {
				layoutParams.leftMargin = 20;
			}
			
			pointView.setEnabled(false);   //默认设置小白点是不可用,即背景是灰色的(上面有个selector_bg_point会根据是否可用来选择背景)
			ll_point.addView(pointView, layoutParams);  //添加小白点到下面的LinearLayout中
			
		}
		
	}

	/**
	 * 初始化视图
	 */
	private void initViews() {
		viewPager = (ViewPager) findViewById(R.id.viewpager);
		ll_point = (LinearLayout) findViewById(R.id.ll_point);
	}

	/**
	 * 重写PagerAdapter   必须实现里面的4个方法getCount(),isViewFromObject(),instantiateItem(),destroyItem()
	 */
	class MyAdapter extends PagerAdapter {

		//返回资源一共的条目
		@Override
		public int getCount() {
			return imageViewList.size();
		}

		//3. 复用判断逻辑   
		//其实在加载时,默认是加载左右两边的图(比如0,1,2   1是现在正在浏览的,而当浏览到2时,0被销毁),如果用户回到刚刚浏览过的,则复用
		@Override
		public boolean isViewFromObject(View view, Object object) {
			return view == object;
		}
		
		//1. 返回条目需要显示的内容   必须重写,否则报异常
		@Override
		public Object instantiateItem(ViewGroup container, int position) {
			Log.d("xfhy", "instantiateItem 加载"+position);
			ImageView imageView = imageViewList.get(position);
			container.addView(imageView);   //将需要显示的图片加载到container中
			return imageView;      
		}
		
		//2. 需要在这里面移除    比如0,1,2   1是现在正在浏览的,而当浏览到2时,0被销毁    0需要被移除
		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {
			Log.d("xfhy", "destroyItem 销毁"+position);
			// object 要销毁的对象
			container.removeView((View) object);
		}
		
	}

}
