package com.xfhy.valueanimatortest;

import android.animation.AnimatorListenerAdapter;
import android.animation.ObjectAnimator;
import android.animation.TypeEvaluator;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.app.Activity;
import android.graphics.Point;
import android.graphics.PointF;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.animation.LinearInterpolator;
import android.widget.ImageView;

/**
 * 2017年4月12日19:38:15
 * @author xfhy
 *
 *	自由落体
 *  抛物线
 *  淡出且删除
 *
 */
public class MainActivity extends Activity {

	private int mScreenHeight = 0;
	private ImageView ball;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		ball = (ImageView) findViewById(R.id.ball);

		// 获取手机屏幕高度
		WindowManager windowManager = getWindowManager();
		Point outSize = new Point();
		windowManager.getDefaultDisplay().getSize(outSize);
		mScreenHeight = outSize.y;
	}

	/**
	 * 自由落体
	 * 
	 * @param view
	 * 
	 */
	public void verticalRun(View view) {
		ValueAnimator animator = ValueAnimator.ofFloat(0,
				mScreenHeight - ball.getHeight());
		animator.setTarget(ball); // 设置动画的执行目标
		animator.setDuration(1000).start(); // 设置开始执行动画
		animator.addUpdateListener(new AnimatorUpdateListener() {

			@Override
			public void onAnimationUpdate(ValueAnimator animation) {
				// 设置此视图相对于其顶部位置的垂直位置。 除了对象的布局放置之外，这有效地定位了对象后布局。
				// 设置的位置根据animation动画的值来决定
				ball.setTranslationY((float) animation.getAnimatedValue());
			}
		});
	}

	/**
	 * 抛物线
	 * 
	 * @param view
	 * 
	 *            如果我希望小球抛物线运动【实现抛物线的效果，水平方向100px/s，垂直方向加速度200px/s*s 】，
	 *            分析一下，貌似只和时间有关系，但是根据时间的变化，横向和纵向的移动速率是不同的，
	 *            我们该咋实现呢？此时就要重写TypeValue的时候了，因为我们在时间变化的同时，
	 *            需要返回给对象两个值，x当前位置，y当前位置：
	 * 
	 *            ValueAnimator valueAnimator = new ValueAnimator();
	 *            valueAnimator.setDuration(3000);
	 *            valueAnimator.setObjectValues(new PointF(0, 0));
	 *            valueAnimator.setInterpolator(new LinearInterpolator());
	 *            valueAnimator.setEvaluator(new TypeEvaluator<PointF>() { //
	 *            fraction = t / duration
	 * @Override public PointF evaluate(float fraction, PointF startValue,
	 *           PointF endValue) { Log.e(TAG, fraction * 3 + ""); // x方向200px/s
	 *           ，则y方向0.5 * 10 * t PointF point = new PointF(); point.x = 200 *
	 *           fraction * 3; point.y = 0.5f * 200 * (fraction * 3) * (fraction
	 *           * 3); return point; } });
	 */
	public void parabola(View view) {
		ValueAnimator valueAnimator = new ValueAnimator();
		valueAnimator.setDuration(3000);
		valueAnimator.setObjectValues(new PointF(0, 0));
		//用于计算此动画的经过分数的时间插值器。 内插器确定动画是否以线性或非线性运动（如加速和减速）运行。
		//默认值为android.view.animation.AccelerateDecelerateInterpolator
		valueAnimator.setInterpolator(new LinearInterpolator());
		
		//计算动画值时使用的类型评估器。 系统将根据构造函数中的startValue和endValue的类型自动分配一个float或int评估器
		//自定义TypeEvaluator传入的泛型可以根据自己的需求，自己设计个Bean。
		valueAnimator.setEvaluator(new TypeEvaluator<PointF>() {
			// fraction = t / duration
			@Override
			public PointF evaluate(float fraction, PointF startValue,
					PointF endValue) {
				// x方向200px/s ，则y方向0.5 * 10 * t
				PointF point = new PointF();
				point.x = 200 * fraction * 3;
				point.y = 0.5f * 200 * (fraction * 3) * (fraction * 3);
				return point;
			}
		});

		valueAnimator.start();
		valueAnimator.addUpdateListener(new AnimatorUpdateListener() {
			@Override
			public void onAnimationUpdate(ValueAnimator animation) {
				PointF point = (PointF) animation.getAnimatedValue();
				ball.setX(point.x);
				ball.setY(point.y);

			}
		});
	}

	/**
	 * 淡出且删除
	 * @param view
	 */
	public void fadeOut(View view){
		/**
		 * 构造并返回一个在浮点值之间进行动画化的ObjectAnimator。 单个值意味着该值是动画化的值，在这种情况下，
		 * 起始值将从动画属性派生，并在第一次调用start（）时引用目标对象。 
		 * 两个值意味着开始和结束值。 两个以上的值意味着一个起始值，
		 * 一路上动画的值和一个结束值（这些值将在动画的持续时间内均匀分布）。
		 */
		ObjectAnimator animator = ObjectAnimator.ofFloat(ball, "alpha", 0.5f);
		
		//这样就可以监听动画的开始、结束、被取消、重复等事件~但是有时候会觉得，
		//我只要知道结束就行了，这么长的代码我不能接收，那你可以使用AnimatorListenerAdapter
		//AnimatorListenerAdapter继承了AnimatorListener接口，然后空实现了所有的方法~
		//animator还有cancel()和end()方法：cancel动画立即停止，停在当前的位置；end动画直接到最终状态。
		animator.addListener(new AnimatorListenerAdapter() {
			public void onAnimationEnd(android.animation.Animator animation) {
				Log.d("xfhy", "onAnimationEnd");
				ViewGroup parentGroup = (ViewGroup) ball.getParent();
				if(parentGroup != null){
					parentGroup.removeView(ball);
				}
			};
		});
		animator.start();    //最后记得开始执行动画
	}
	
}
